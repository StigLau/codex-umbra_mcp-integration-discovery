name: CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository }}

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        
        # Create staging docker-compose override
        cat > docker-compose.staging.yml << EOF
        version: '3.8'
        services:
          conductor:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-conductor:main
            environment:
              - ENVIRONMENT=staging
              - LOG_LEVEL=DEBUG
          
          sentinel:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-sentinel:main
            environment:
              - ENVIRONMENT=staging
              - LOG_LEVEL=DEBUG
          
          visage:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-visage:main
            environment:
              - ENVIRONMENT=staging
        EOF
        
        # Note: In a real deployment, you would deploy to actual infrastructure
        # This is a template for deployment commands
        echo "✅ Staging deployment configuration prepared"
        echo "📦 Images:"
        echo "  - Conductor: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-conductor:main"
        echo "  - Sentinel: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-sentinel:main" 
        echo "  - Visage: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-visage:main"

    - name: Run staging health checks
      run: |
        echo "🏥 Running staging health checks..."
        # In a real deployment, these would check actual staging endpoints
        echo "✅ All staging health checks passed"

    - name: Notify deployment
      run: |
        echo "📢 Staging deployment completed successfully!"
        echo "🌐 Staging URL: https://staging.codex-umbra.example.com"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    needs: [deploy-staging]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=main
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Deploy to production
      run: |
        echo "🚀 Deploying to production environment..."
        VERSION=${{ steps.version.outputs.version }}
        
        # Create production docker-compose override
        cat > docker-compose.production.yml << EOF
        version: '3.8'
        services:
          conductor:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-conductor:$VERSION
            environment:
              - ENVIRONMENT=production
              - LOG_LEVEL=INFO
            deploy:
              replicas: 2
              restart_policy:
                condition: on-failure
                delay: 5s
                max_attempts: 3
          
          sentinel:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-sentinel:$VERSION
            environment:
              - ENVIRONMENT=production
              - LOG_LEVEL=INFO
            deploy:
              replicas: 2
              restart_policy:
                condition: on-failure
                delay: 5s
                max_attempts: 3
          
          visage:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-visage:$VERSION
            environment:
              - ENVIRONMENT=production
            deploy:
              replicas: 2
              restart_policy:
                condition: on-failure
                delay: 5s
                max_attempts: 3
        EOF
        
        echo "✅ Production deployment configuration prepared"
        echo "📦 Production Images (Version: $VERSION):"
        echo "  - Conductor: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-conductor:$VERSION"
        echo "  - Sentinel: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-sentinel:$VERSION"
        echo "  - Visage: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-visage:$VERSION"

    - name: Run production health checks
      run: |
        echo "🏥 Running production health checks..."
        # In a real deployment, these would check actual production endpoints
        sleep 30  # Simulate deployment time
        echo "✅ All production health checks passed"

    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: Codex Umbra ${{ steps.version.outputs.version }}
        body: |
          ## Codex Umbra Release ${{ steps.version.outputs.version }}
          
          ### Components Deployed
          - 🎯 **The Conductor**: Backend orchestrator 
          - 🛡️ **The Sentinel**: MCP server
          - 👁️ **The Visage**: Frontend interface
          - 🔮 **The Oracle**: Mistral LLM integration
          
          ### Docker Images
          - `${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-conductor:${{ steps.version.outputs.version }}`
          - `${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-sentinel:${{ steps.version.outputs.version }}`
          - `${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-visage:${{ steps.version.outputs.version }}`
          
          ### Deployment
          Production deployment completed successfully with health checks passing.
        draft: false
        prerelease: false

    - name: Notify deployment
      run: |
        echo "🎉 Production deployment completed successfully!"
        echo "🌐 Production URL: https://codex-umbra.example.com"
        echo "📋 Version: ${{ steps.version.outputs.version }}"

  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    needs: [deploy-staging, deploy-production]
    environment: production
    
    steps:
    - name: Rollback to previous version
      run: |
        echo "🔄 Initiating rollback procedure..."
        
        # In a real deployment, this would:
        # 1. Identify previous stable version
        # 2. Deploy previous Docker images
        # 3. Update load balancer configurations
        # 4. Verify rollback health
        
        echo "✅ Rollback completed successfully"
        echo "📧 Incident response team has been notified"