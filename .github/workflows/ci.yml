name: CI Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository }}

jobs:
  test-frontend:
    name: Test Frontend (Visage)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: codex-umbra-visage/package-lock.json

    - name: Install dependencies
      working-directory: codex-umbra-visage
      run: npm ci

    - name: Run linting
      working-directory: codex-umbra-visage
      run: npm run lint --if-present

    - name: Run type checking
      working-directory: codex-umbra-visage
      run: npm run type-check --if-present

    - name: Run unit tests
      working-directory: codex-umbra-visage
      run: npm test

    - name: Build application
      working-directory: codex-umbra-visage
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: codex-umbra-visage/dist/

  test-backend:
    name: Test Backend Services
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
        service: ['conductor', 'sentinel']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.service }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.service }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      working-directory: ${{ matrix.service == 'conductor' && 'conductor_project' || 'mcp_server_project' }}
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov black flake8 mypy

    - name: Run code formatting check
      working-directory: ${{ matrix.service == 'conductor' && 'conductor_project' || 'mcp_server_project' }}
      run: black --check --diff .

    - name: Run linting
      working-directory: ${{ matrix.service == 'conductor' && 'conductor_project' || 'mcp_server_project' }}
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Run type checking
      working-directory: ${{ matrix.service == 'conductor' && 'conductor_project' || 'mcp_server_project' }}
      run: mypy . --ignore-missing-imports

    - name: Run unit tests
      working-directory: ${{ matrix.service == 'conductor' && 'conductor_project' || 'mcp_server_project' }}
      run: |
        python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing
      continue-on-error: true

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ${{ matrix.service == 'conductor' && 'conductor_project' || 'mcp_server_project' }}/coverage.xml
        flags: ${{ matrix.service }}
        name: ${{ matrix.service }}-${{ matrix.python-version }}

  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        component: [conductor, sentinel, visage]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.component }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.component == 'conductor' && 'conductor_project' || matrix.component == 'sentinel' && 'mcp_server_project' || 'codex-umbra-visage-simple' }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    
    services:
      ollama:
        image: ollama/ollama:latest
        ports:
          - 11434:11434
        options: >-
          --health-cmd "curl -f http://localhost:11434/api/tags || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose

    - name: Setup Ollama and pull Mistral
      run: |
        # Wait for Ollama to be ready
        timeout 300 bash -c 'until curl -s http://localhost:11434/api/tags; do sleep 5; done'
        # Pull Mistral model
        curl -X POST http://localhost:11434/api/pull -H "Content-Type: application/json" -d '{"name": "mistral"}'

    - name: Start services
      run: |
        # Update docker-compose to use host network for Ollama
        sed -i 's/host.docker.internal:11434/localhost:11434/g' docker-compose.yml
        docker-compose up -d --build
        
    - name: Wait for services
      run: |
        timeout 300 bash -c 'until curl -s http://localhost:8000/health; do sleep 5; done'
        timeout 300 bash -c 'until curl -s http://localhost:8001/health; do sleep 5; done'
        timeout 300 bash -c 'until curl -s http://localhost:5173; do sleep 5; done'

    - name: Run integration tests
      run: |
        chmod +x scripts/test_comprehensive_frontend.sh
        ./scripts/test_comprehensive_frontend.sh

    - name: Run health checks
      run: |
        curl -f http://localhost:8000/health
        curl -f http://localhost:8001/health
        curl -f http://localhost:5173

    - name: Test API endpoints
      run: |
        # Test basic functionality
        response=$(curl -s -X POST http://localhost:8000/api/v1/chat \
          -H "Content-Type: application/json" \
          -d '{"message":"Hello","user_id":"ci-test"}')
        echo "API Response: $response"
        
        # Verify response is not empty
        if [ -z "$response" ]; then
          echo "‚ùå API response is empty"
          exit 1
        fi

    - name: Cleanup
      if: always()
      run: |
        docker-compose down -v
        docker system prune -f

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Bandit security linting
      run: |
        pip install bandit
        bandit -r conductor_project/ mcp_server_project/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Upload security scan artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          trivy-results.sarif
          bandit-report.json